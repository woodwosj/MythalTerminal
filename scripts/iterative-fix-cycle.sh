#!/bin/bash

# Iterative Fix Cycle - Runs coder and reviewer until approval
# Maximum 5 iterations to prevent infinite loops

PROJECT_DIR="/home/stephen-woodworth/Desktop/MythalTerminal"
cd "$PROJECT_DIR"

echo "🔄 Starting Iterative Fix-Review Cycle"
echo "======================================"
echo "This will run coder and reviewer alternately until approval"
echo ""

MAX_ITERATIONS=5
ITERATION=1
APPROVED=false

while [ $ITERATION -le $MAX_ITERATIONS ] && [ "$APPROVED" = false ]; do
    echo ""
    echo "======================================"
    echo "📍 ITERATION $ITERATION of $MAX_ITERATIONS"
    echo "======================================"
    echo ""
    
    # Step 1: Run Coder to fix issues
    echo "👨‍💻 Running CODER Instance (Iteration $ITERATION)..."
    echo "----------------------------------------"
    
    if [ $ITERATION -eq 1 ]; then
        # First iteration - fix all known issues
        bash scripts/coder-fixer.sh
    else
        # Subsequent iterations - fix based on reviewer feedback
        echo "Fixing issues from reviewer feedback..."
        
        # Read the todo list and fix remaining issues
        claude --print \
        --model claude-opus-4-1-20250805 \
        --output-format text \
        --max-turns 5 \
        "You are the coder. The reviewer has given you specific feedback.
        
        Read the file /tmp/coder-todo.md to see what you need to fix.
        
        For each item in the TODO list:
        1. If it's a test to write - create the test file with comprehensive test cases
        2. If it's an issue to fix - read the file and apply the fix
        3. Mark each item as complete with a comment in the code
        
        Use Read, Write, and Edit tools to complete ALL items.
        Be thorough - the reviewer is very strict." > /tmp/iteration-$ITERATION-fixes.log
    fi
    
    echo "✅ Coder fixes applied"
    echo ""
    
    # Step 2: Run tests to check current state
    echo "🧪 Running tests..."
    npm test 2>&1 | tail -20
    
    # Step 3: Run Reviewer to validate
    echo ""
    echo "👨‍⚖️ Running REVIEWER Instance (Iteration $ITERATION)..."
    echo "----------------------------------------"
    
    bash scripts/reviewer-validator.sh
    
    # Check if approved
    if [ -f /tmp/review-validation.json ]; then
        VERDICT=$(jq -r '.verdict' /tmp/review-validation.json)
        if [ "$VERDICT" = "APPROVED" ]; then
            APPROVED=true
            echo ""
            echo "🎉 CODE APPROVED!"
        else
            echo ""
            echo "❌ Not approved yet. Moving to next iteration..."
            
            # Show what needs to be fixed
            echo "Remaining work:"
            jq -r '.remaining_issues[] | "  - \(.issue)"' /tmp/review-validation.json 2>/dev/null | head -5
            jq -r '.demanded_tests[] | "  - Test: \(.description)"' /tmp/review-validation.json 2>/dev/null | head -5
        fi
    fi
    
    ITERATION=$((ITERATION + 1))
    
    # Small delay between iterations
    sleep 2
done

echo ""
echo "======================================"
echo "📊 FINAL RESULTS"
echo "======================================"

if [ "$APPROVED" = true ]; then
    echo "✅ SUCCESS! Code has been approved after $((ITERATION - 1)) iteration(s)"
    echo ""
    echo "Final Metrics:"
    COVERAGE=$(npm run test:coverage -- --silent --json 2>/dev/null | tail -1 | jq -r '.total.lines.pct // 0' || echo "Unknown")
    echo "  Test Coverage: ${COVERAGE}%"
    echo "  Quality Score: $(jq -r '.quality_score' /tmp/review-validation.json)/10"
    echo ""
    echo "The code is now production-ready!"
else
    echo "❌ FAILED to get approval after $MAX_ITERATIONS iterations"
    echo ""
    echo "Remaining Issues:"
    jq -r '.remaining_issues[] | "  - [\(.severity)] \(.issue)"' /tmp/review-validation.json 2>/dev/null
    echo ""
    echo "Manual intervention required to resolve remaining issues."
fi

# Generate final summary report
cat > iterative-fix-summary.md << EOF
# Iterative Fix Cycle Summary

**Date:** $(date)
**Total Iterations:** $((ITERATION - 1))
**Final Status:** $([ "$APPROVED" = true ] && echo "APPROVED ✅" || echo "NOT APPROVED ❌")

## Iteration History
$(for i in $(seq 1 $((ITERATION - 1))); do
    echo "### Iteration $i"
    if [ -f /tmp/iteration-$i-fixes.log ]; then
        echo "Fixes applied in this iteration"
    fi
done)

## Final Metrics
- Test Coverage: ${COVERAGE:-Unknown}%
- Quality Score: $(jq -r '.quality_score' /tmp/review-validation.json 2>/dev/null || echo "N/A")/10
- Verdict: $(jq -r '.verdict' /tmp/review-validation.json 2>/dev/null || echo "N/A")

## Lessons Learned
The iterative process $([ "$APPROVED" = true ] && echo "successfully" || echo "was unable to") achieve production-ready code.

---
*Generated by Iterative Fix Cycle System*
EOF

echo ""
echo "📄 Summary saved to iterative-fix-summary.md"
echo "======================================"